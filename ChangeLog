2014-01-07  Titus Brown  <t@Titus-MacBook-Air-2.local>

 * Initialized repository, created server.py and README.
 
<<<<<<< HEAD
2014-01-16  Maximillian Sweet
 
 * Added an HTTP response and a header/body to display in the browser
=======
 
2014-01-23  Maximillian Sweet  <MaxSweet@sweetmax.local>

 * Added header to HTTP Response
 * Cleaned up code

2014-01-23 Maximillian Sweet <MaxSweet@sweetmax.local>

 * Finished HW2, Added ability to handle different paths
 * Added POST functionality
<<<<<<< HEAD
>>>>>>> b336e417f640929c8c34ad5bf44d1a6ac197d657
=======
 
2014-01-23 Maximillian Sweet <MaxSweet@sweetmax.local>

 * Updated HW1
>>>>>>> e36038543aa33a48f09683fd3bff76b911843115

2014-01-30  Maximillian Sweet  <MaxSweet@sweetmax.local>

 * Merged hw3
 
2014-02-06  Maximillian Sweet  <MaxSweet@sweetmax.local>

 * Merged hw4

2014-02-13  Maximillian Sweet  <MaxSweet@sweetmax.local>

 * Merged hw5

2014-02-20  Maximillian Sweet  <MaxSweet@sweetmax.local>

 * Merged hw6

2014-02-27  Maximillian Sweet  <MaxSweet@sweetmax.local>

 * Merged hw7
 
 2014-03-20  Maximillian Sweet  <MaxSweet@sweetmax.local>

* Implemented command line options in server.py to run imageapp, quixote demo app, and app.py
* Add twill tests for all 3 applications
* PROJECT: Change imageapp to support JPEG and TIFF. (5pts)
    
    - Summary: imageapp will now allow users to upload JPEG and TIFF images instead
      of only PNGs and display them. PNG images are still supported. Most browsers
      don't support TIFF very well without extensions.

    - This was primarily done by modifying the code in imageapp/image.py and 
      imageapp/root.py.

    - In image.py, I add_image was modified to accept an additional parameter, filename, 
      which is the filename of the image. This is added in a tuple with the image data 
      to the images dictionary in the form (filename, data).

    - Now, get_image/get_latest_image will return (filename, data). This is utilized in
      root.py. In image_raw, rather than setting the reponse content type to image/png,
      the filename is parsed to find the extension. That file extension is used to
      determine what the content type should be set to (image/jpeg for .jpg/.jpeg and
      image/tiff for .tif/.tiff). The file extension is not case senstive, .TIF will
      work just as .tif would.

2014-3-27 Maximillian Sweet  <MaxSweet@sweetmax.local>
  * Integrated quotes app
  * Integrated chat app and added a timestamp to each image in the chat window
  * PROJECT: Add a URL that provides a list of images, resized to thumbnails (you can just img size, not
    actual resizing â€“ that will be a separate project ;).

    - Summary: There's a link on the index page to see a list of all the images that were uploaded. It shows
      the most recently updated image first.

    - I added a check in get_image_raw() to see if the request included a query parameter "num". If so, 
      rather than getting the most recent image, it gets the image at images[num]. I also added a method to
      return the count of images. Using these two things, I can make a few ajax calls in the image list page
      to iterate over images and display every image.
	  
	  

2014-4-3 Maximillian Sweet  <MaxSweet@sweetmax.local>
  * PROJECT: Add the ability to comment on images
    - User can post a comment on an image from the /image page.

    - Made an Image class that has a list of comments for that string.

    - A request to the get_comments url provided an image number returns XML containing all of its comments.
      If the image number is not included it defaults to the latest image

  * PROJECT: Add url handler to refer to each image by its number.
    - /image_raw?imageNum=# will return the image with num = #.

    - If # is not numeric, or is off the end of the list, it defaults to the latest image.

    - If you go to the images list ( /image_list ) each image is a link to the URL for that image (so the
      second to the bottom image links to /image?imageNum=1 for example)
